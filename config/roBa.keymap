#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                    &kp W             &kp E                   &kp R                   &kp T                                &kp Y                 &kp U               &lt 0 I    &kp O    &kp P
&lt 3 A                  &kp S             &kp D                   &mt LEFT_COMMAND F      &kp G      &to 1          &kp ESC    &kp H                 &mt LEFT_COMMAND J  &kp K      &kp L    &lt 1 BACKSPACE
&mt LEFT_SHIFT Z         &kp X             &kp C                   &kp V                   &kp B      &mkp MB1       &kp TAB    &kp N                 &kp M               &kp COMMA  &kp DOT  &kp MINUS
&mt LEFT_SHIFT CAPSLOCK  &kp LEFT_CONTROL  &mt LEFT_ALT LA(SPACE)  &mt LEFT_COMMAND SPACE  &kp SPACE  &lt 1 F19      &lt 2 F20  &mt LEFT_SHIFT ENTER                                          &mkp MB1
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp NUMBER_1         &kp NUMBER_2      &kp NUMBER_3    &kp NUMBER_4      &kp NUMBER_5                             &kp NUMBER_6          &kp NUMBER_7          &kp NUMBER_8      &kp NUMBER_9       &kp NUMBER_0
&kp LEFT_ARROW       &kp RIGHT_ARROW   &kp DOWN_ARROW  &kp UP_ARROW      &kp SEMICOLON  &to 0          &kp ESC    &kp SLASH             &kp NON_US_BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSPACE
&bt BT_SEL 0         &bt BT_SEL 2      &bt BT_SEL 1    &bt BT_SEL 3      &kp SQT        &mkp MB2       &kp TAB    &kp GRAVE             &kp EQUAL             &kp COMMA         &kp PERIOD         &kp MINUS
&mt LEFT_SHIFT CAPS  &kp LEFT_CONTROL  &kp LEFT_ALT    &kp LEFT_COMMAND  &kp SPACE      &lt 1 F19      &lt 2 F20  &mt LEFT_SHIFT ENTER                                                             &mkp MB2
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION          &kp AT_SIGN          &kp HASH            &kp DOLLAR        &kp PERCENT                                  &kp CARET             &kp AMPERSAND  &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp LC(LEFT_ARROW)       &kp LC(RIGHT_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(UP_ARROW)  &kp COLON          &trans         &kp ESC    &kp QUESTION          &kp PIPE       &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSPACE
&bt BT_SEL 0             &bt BT_SEL 2         &bt BT_SEL 1        &bt BT_SEL 3      &kp DOUBLE_QUOTES  &mkp MB3       &kp TAB    &kp TILDE             &kp PLUS       &kp LESS_THAN   &kp GREATER_THAN      &kp UNDERSCORE
&mt LEFT_SHIFT CAPSLOCK  &kp LEFT_CONTROL     &kp LEFT_ALT        &kp LEFT_COMMAND  &kp SPACE          &lt 1 F19      &lt 2 F20  &mt LEFT_SHIFT ENTER                                                       &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&trans  &trans         &trans         &trans         &trans                      &kp LA(LC(Y))               &kp LA(LC(U))  &kp LA(LC(I))      &kp LA(LC(O))                &trans
&trans  &kp LA(LC(S))  &kp LA(LC(D))  &kp LA(LC(F))  &trans  &trans      &trans  &kp LA(LC(LG(LEFT_ARROW)))  &kp LA(LC(J))  &kp LC(LA(K))      &kp LA(LC(LG(RIGHT_ARROW)))  &trans
&trans  &kp LA(LC(X))  &trans         &kp LA(LC(V))  &trans  &trans      &trans  &kp LC(LG(F))               &kp LA(LC(M))  &kp LA(LC(COMMA))  &kp LA(LC(PERIOD))           &trans
&trans  &trans         &trans         &trans         &trans  &trans      &trans  &trans                                                                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };
    };
};
